import streamlit as st
import pandas as pd
from datetime import datetime, date, time, timezone, timedelta # ‡πÄ‡∏û‡∏¥‡πà‡∏° time
import os
import numpy as np
import math
import pathlib
import base64
# üí• NEW: Import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô QR Code
from streamlit_qrcode_scanner import qrcode_scanner # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå

# -----------------------------------------------------------------
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Desktop (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
# -----------------------------------------------------------------
LOGS_DIR = os.path.join(os.path.expanduser('~'), 'Desktop', 'TimeLogs')
DATA_FILE = os.path.join(LOGS_DIR, "time_logs.csv")

# -----------------------------------------------------------------
# üí• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
# -----------------------------------------------------------------
CSV_COLUMNS = ['Employee_ID', 'Date', 'Start_Time', 'End_Time', 'Activity_Type', 'Duration_Minutes']

# --- 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà) ---

@st.cache_data
def load_data():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
    if os.path.exists(DATA_FILE):
        try:
            df = pd.read_csv(DATA_FILE)
            if not df.empty:
                df['Date'] = pd.to_datetime(df['Date']).dt.date.astype(str)
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•, ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ NaN
                df['Start_Time'] = df['Start_Time'].astype(str)
                df['End_Time'] = df['End_Time'].astype(str).replace('nan', np.nan)
                df['Duration_Minutes'] = pd.to_numeric(df['Duration_Minutes'], errors='coerce') # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç, ‡∏ñ‡πâ‡∏≤ Error ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô NaN
            else:
                 # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡πÅ‡∏ï‡πà Header
                 df = pd.DataFrame(columns=CSV_COLUMNS)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            for col in CSV_COLUMNS:
                 if col not in df.columns:
                      df[col] = np.nan # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡πÑ‡∏õ

            return df.reindex(columns=CSV_COLUMNS) # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤

        except pd.errors.EmptyDataError: # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
             return pd.DataFrame(columns=CSV_COLUMNS)
        except Exception as e:
             st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
             return pd.DataFrame(columns=CSV_COLUMNS)

    return pd.DataFrame(columns=CSV_COLUMNS)

def initialize_data_file():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ"""
    try:
        pathlib.Path(LOGS_DIR).mkdir(parents=True, exist_ok=True)
    except OSError as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: {LOGS_DIR}. ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á.")
        st.stop()

    if not os.path.exists(DATA_FILE):
        df = pd.DataFrame(columns=CSV_COLUMNS)
        df.to_csv(DATA_FILE, index=False)
        st.info(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå {DATA_FILE} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

def save_data(df):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å DataFrame ‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV"""
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        for col in CSV_COLUMNS:
            if col not in df.columns:
                df[col] = np.nan
        df = df[CSV_COLUMNS] # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
        df.to_csv(DATA_FILE, index=False)
        st.cache_data.clear() # ‡∏•‡πâ‡∏≤‡∏á Cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

# üí• NEW: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Duration (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ)
def calculate_duration(start_time_str, end_time_str):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ"""
    try:
        if pd.isnull(start_time_str) or pd.isnull(end_time_str) or str(start_time_str).lower() == 'nan' or str(end_time_str).lower() == 'nan':
            return np.nan

        date_time_format = '%H:%M:%S'
        base_date = datetime(2000, 1, 1)

        t_start_time = datetime.strptime(str(start_time_str), date_time_format).time()
        t_end_time = datetime.strptime(str(end_time_str), date_time_format).time()

        t_start = datetime.combine(base_date, t_start_time)
        t_end = datetime.combine(base_date, t_end_time)

        if t_end < t_start:
            t_end += pd.Timedelta(days=1)

        duration_minutes = (t_end - t_start).total_seconds() / 60
        return max(0, duration_minutes)
    except (ValueError, TypeError, AttributeError):
        return np.nan

# üí• NEW: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Clock Out ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
def clock_out_latest_activity(employee_id, date_str, end_time_str):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞ Clock Out ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"""
    df = load_data() # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    
    # Filter ‡∏´‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ End_Time
    condition = (df['Employee_ID'] == employee_id) & \
                (df['Date'] == date_str) & \
                (df['End_Time'].isna() | (df['End_Time'].astype(str).str.lower() == 'nan') | (df['End_Time'] == ''))
                
    ongoing_activities = df[condition]

    if not ongoing_activities.empty:
        # ‡∏´‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (index ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
        index_to_update = ongoing_activities.index.max()
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï End_Time
        df.loc[index_to_update, 'End_Time'] = end_time_str
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Duration
        start_time = df.loc[index_to_update, 'Start_Time']
        duration = calculate_duration(start_time, end_time_str)
        df.loc[index_to_update, 'Duration_Minutes'] = duration
        
        save_data(df)
        return True # Clock Out ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    return False # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á Clock Out

# üí• NEW: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà (‡∏£‡∏ß‡∏° Clock Out ‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤)
def log_activity_start(employee_id, date_str, start_time_str, activity_type):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞ Clock Out ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"""
    try:
        # 1. Clock Out ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
        clock_out_latest_activity(employee_id, date_str, start_time_str) # ‡πÉ‡∏ä‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏ö‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤

        # 2. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ Clock Out)
        df = load_data()

        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ
        new_row = pd.DataFrame([{
            'Employee_ID': employee_id,
            'Date': date_str,
            'Start_Time': start_time_str,
            'End_Time': np.nan,
            'Activity_Type': activity_type,
            'Duration_Minutes': np.nan
        }])

        # 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df_to_save = pd.concat([df, new_row], ignore_index=True)
        save_data(df_to_save)
        return True
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° {activity_type}: {e}")
        return False

def delete_log_entry(original_index):
    """‡∏•‡∏ö Log ‡∏ï‡∏≤‡∏° Index ‡πÄ‡∏î‡∏¥‡∏°"""
    df = load_data()
    if original_index in df.index:
        df = df.drop(index=original_index)
        save_data(df)
    else:
        st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö Index {original_index} ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö")


# --- 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---

def format_time_display(time_str):
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô HH:MM"""
    if pd.isnull(time_str) or str(time_str).lower() == 'nan':
        return "N/A"
    try:
        # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å HH:MM:SS
        return datetime.strptime(str(time_str), '%H:%M:%S').strftime('%H:%M')
    except (ValueError, TypeError):
        # ‡∏ñ‡πâ‡∏≤ Error ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô HH:MM ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô
        return str(time_str).split('.')[0] # ‡∏ï‡∏±‡∏î .0 ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ

def format_duration(minutes):
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏õ‡πá‡∏ô HH:MM"""
    if pd.isnull(minutes) or (isinstance(minutes, float) and math.isnan(minutes)):
        return "N/A"
    try:
        minutes = int(float(minutes)) # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô string "120.0"
    except (ValueError, TypeError):
        return "N/A" # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ

    if minutes < 0:
        return "00:00"

    hours = int(minutes // 60)
    mins = int(minutes % 60)
    return f"{hours:02d}:{mins:02d}"


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
def get_csv_content_with_bom(data_file_path):
    # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ...
    try:
        with open(data_file_path, "r", encoding='utf-8') as f:
            csv_content = f.read()
        bom = "\ufeff"
        content_with_bom = bom + csv_content
        return content_with_bom
    except FileNotFoundError: return None
    except Exception as e: return None

# -----------------------------------------------------------------
# üí• NEW: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô MAIN (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Layout ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)
# -----------------------------------------------------------------
def main():
    # --- 3. ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (UI) ---
    st.set_page_config(page_title="Time Logger", layout="wide")

    # (‡∏™‡πà‡∏ß‡∏ô Session State... ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    if "current_emp_id" not in st.session_state:
        st.session_state["current_emp_id"] = ""
    if "manual_emp_id_input" not in st.session_state:
        st.session_state["manual_emp_id_input"] = ""
    if "last_message" not in st.session_state:
        st.session_state.last_message = None

    # --- 3.1 ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    initialize_data_file()

    # --- 3.2 ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    df = load_data() 

    # --- 3.3 Callback Function ---
    # (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô submit_activity(...) ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£)
    def submit_activity(activity_type):
        """
        Callback ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô '‡∏Å‡πà‡∏≠‡∏ô' ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏à‡∏∞ Rerun
        """
        
        # 1. ‡∏î‡∏∂‡∏á ID ‡∏à‡∏≤‡∏Å session_state (‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢ sync logic)
        emp_id = st.session_state.get("current_emp_id", "")
        if not emp_id:
            st.session_state.last_message = ("warning", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å Employee ID ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")
            return # ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ID

        # 2. ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        THAILAND_TZ = timezone(timedelta(hours=7))
        now_thailand = datetime.now(THAILAND_TZ)
        current_date_str = now_thailand.date().strftime('%Y-%m-%d')
        current_time_str = now_thailand.time().strftime('%H:%M:%S')

        # 3. Logic ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÉ‡∏ô Form)
        if activity_type == "End_Activity":
            if clock_out_latest_activity(emp_id, current_date_str, current_time_str):
                # 4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Message ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤
                st.session_state.last_message = ("success", f"‚úÖ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID: **{emp_id}** ‡πÄ‡∏ß‡∏•‡∏≤ {current_time_str} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
                st.session_state["current_emp_id"] = "" 
                st.session_state["manual_emp_id_input"] = "" # ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà rerender
            else:
                st.session_state.last_message = ("warning", f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID: **{emp_id}** ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {current_date_str}")
        else:
            # (activity_type ‡∏Ñ‡∏∑‡∏≠ "Break", "Smoking", "Toilet")
            if log_activity_start(emp_id, current_date_str, current_time_str, activity_type):
                success_message = f"‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° **{activity_type}** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID: **{emp_id}** ‡πÄ‡∏ß‡∏•‡∏≤ {current_time_str} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!"
                if activity_type == "Smoking":
                    success_message = f"üö≠ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID: **{emp_id}** ‡πÄ‡∏ß‡∏•‡∏≤ {current_time_str} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!"
                elif activity_type == "Toilet":
                     success_message = f"üöª ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID: **{emp_id}** ‡πÄ‡∏ß‡∏•‡∏≤ {current_time_str} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!"
                
                # 4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Message ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤
                st.session_state.last_message = ("success", success_message)
                st.session_state["current_emp_id"] = "" 
                st.session_state["manual_emp_id_input"] = "" # ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà rerender
            else:
                st.session_state.last_message = ("error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° {activity_type}")


    # ‡∏™‡∏£‡πâ‡∏≤‡∏á 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Layout ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    main_col1, main_col2 = st.columns([1, 2])
    
    # -----------------------------------------------------------------
    # ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢
    # -----------------------------------------------------------------
    with main_col1:
        st.title("‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")
        st.markdown(f"**‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà:** `{LOGS_DIR}`")

        # (‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á Message... ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        if st.session_state.last_message:
            msg_type, msg_content = st.session_state.last_message
            if msg_type == "success":
                st.success(msg_content)
            elif msg_type == "warning":
                st.warning(msg_content)
            elif msg_type == "error":
                st.error(msg_content)
            st.session_state.last_message = None 

        # --- ‡∏™‡πà‡∏ß‡∏ô Input ID (Manual/QR) ---
        
        # 1. ‡∏¢‡πâ‡∏≤‡∏¢ QR Scanner ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        st.markdown("‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡πÅ‡∏Å‡∏ô QR/Barcode:") 
        scanned_id = qrcode_scanner(key="qrcode_scanner_key_new")

        # ---------------------------------------------------------
        # üí•üí•üí• FIX: 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Loop üí•üí•üí•
        # ---------------------------------------------------------
        
        # Rerun ‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠:
        # 1. ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô (scanned_id is not None)
        # 2. ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô '‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö' ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô session_state
        if scanned_id and scanned_id != st.session_state.manual_emp_id_input:
            st.session_state["manual_emp_id_input"] = scanned_id # Update state
            st.session_state["current_emp_id"] = scanned_id      # Update state
            st.rerun() # Rerun ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        
        # 3. ‡∏ß‡∏≤‡∏î Manual Input ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        manual_input = st.text_input(
            "‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ):", 
            key="manual_emp_id_input", 
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà"
        )
        
        # 4. Sync Logic ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        if manual_input != st.session_state.get("current_emp_id", ""):
             st.session_state["current_emp_id"] = manual_input
        else:
             st.session_state["current_emp_id"] = st.session_state["manual_emp_id_input"]

        
        emp_id_input = st.session_state.get("current_emp_id", "")
            
        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏∏‡πà‡∏° Button + on_click --- (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        if emp_id_input:
            st.info(f"ID ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: **{emp_id_input}**")
        else:
            st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å Employee ID ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°") 

        st.write("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:")
        
        activity_buttons_col1, activity_buttons_col2, activity_buttons_col3, activity_buttons_col4 = st.columns(4)

        is_disabled = not bool(emp_id_input) 
        
        with activity_buttons_col1:
            st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å‡πÄ‡∏ö‡∏£‡∏Ñ", type="primary", use_container_width=True, disabled=is_disabled,
                        on_click=submit_activity, args=("Break",))
        
        with activity_buttons_col2:
            st.button("‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà", use_container_width=True, disabled=is_disabled,
                        on_click=submit_activity, args=("Smoking",))
        
        with activity_buttons_col3:
            st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", use_container_width=True, disabled=is_disabled,
                        on_click=submit_activity, args=("Toilet",))
        
        with activity_buttons_col4:
            st.button("‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", type="secondary", use_container_width=True, disabled=is_disabled,
                        on_click=submit_activity, args=("End_Activity",))

        # (‡∏™‡πà‡∏ß‡∏ô Download... ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        st.subheader("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        csv_data = get_csv_content_with_bom(DATA_FILE)
        if csv_data:
            st.download_button(
                label="Download Log File (.csv)",
                data=csv_data,
                file_name=os.path.basename(DATA_FILE),
                mime="text/csv",
                key="download_button_key"
            )

        st.markdown("---") 

    # -----------------------------------------------------------------
    # ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£)
    # -----------------------------------------------------------------
    with main_col2:
        # (‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô main_col2 ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤")

        # --- ‡∏™‡πà‡∏ß‡∏ô Filter ---
        col_filter1, col_filter2, col_filter3 = st.columns(3)
        filter_date_from = col_filter1.date_input("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (From)", value=datetime.now().date(), key="date_from_key")
        filter_date_to = col_filter2.date_input("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (To)", value=datetime.now().date(), key="date_to_key")
        unique_ids = ["All"]
        if not df.empty and 'Employee_ID' in df.columns:
            unique_ids += sorted(df['Employee_ID'].dropna().unique())
        filter_id = col_filter3.selectbox("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° Employee ID", options=unique_ids, key="id_filter_key")

        # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---
        if df.empty:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤")
        else:
            display_df = df.copy()
            display_df['Original_Index'] = display_df.index 
            display_df['Date_Obj'] = pd.to_datetime(display_df['Date']).dt.date

            if filter_date_from and filter_date_to:
                if filter_date_from <= filter_date_to:
                    display_df = display_df[
                        (display_df['Date_Obj'] >= filter_date_from) &
                        (display_df['Date_Obj'] <= filter_date_to)
                    ]
                else:
                    st.error("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà From ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà To ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
                    st.stop() 

            if filter_id != "All":
                display_df = display_df[display_df['Employee_ID'] == filter_id]

            if display_df.empty:
                st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
            else:
                display_df = display_df.drop(columns=['Date_Obj'], errors='ignore')
                display_df = display_df.sort_values(by=['Date', 'Start_Time'], ascending=[False, False])
                display_df = display_df.reset_index(drop=True) 

                col_ratios = [0.5, 1, 1, 1.2, 1, 1, 1.3]
                cols = st.columns(col_ratios)
                headers = ["‡∏•‡∏ö", "Employee ID", "Date", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", "‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", "**‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤**"]
                for col, header in zip(cols, headers):
                    col.markdown(f"**{header}**")
                
                st.markdown("---") 

                for index, row in display_df.iterrows(): 
                    original_index = row['Original_Index']
                    cols = st.columns(col_ratios)
                    time_style = "class='time-display'"
                    if cols[0].button("‚ùå", key=f"del_{original_index}_{index}", on_click=delete_log_entry, args=(original_index,), help="‡∏•‡∏ö Log ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ"):
                         st.rerun()
                    cols[1].write(row['Employee_ID'])
                    cols[2].write(row['Date'])
                    cols[3].write(row['Activity_Type'])
                    cols[4].markdown(f"<p {time_style}>{format_time_display(row['Start_Time'])}</p>", unsafe_allow_html=True)
                    end_time_display = format_time_display(row['End_Time'])
                    cols[5].markdown(f"<p {time_style}>{end_time_display}</p>", unsafe_allow_html=True)
                    duration_display = format_duration(row['Duration_Minutes'])
                    cols[6].markdown(f"<p {time_style}>{duration_display}</p>", unsafe_allow_html=True)

# -----------------------------------------------------------------
if __name__ == "__main__":
    main()
