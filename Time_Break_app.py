import streamlit as st
import pandas as pd
from datetime import datetime, date, time # ‡πÄ‡∏û‡∏¥‡πà‡∏° time
import os
import numpy as np
import math
import pathlib
import base64

# -----------------------------------------------------------------
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Desktop (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
# -----------------------------------------------------------------
LOGS_DIR = os.path.join(os.path.expanduser('~'), 'Desktop', 'TimeLogs')
DATA_FILE = os.path.join(LOGS_DIR, "time_logs.csv")

# -----------------------------------------------------------------
# üí• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
# -----------------------------------------------------------------
CSV_COLUMNS = ['Employee_ID', 'Date', 'Start_Time', 'End_Time', 'Activity_Type', 'Duration_Minutes']


# --- CSS (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà) ---
CUSTOM_CSS = """
<style>
/* ... (CSS ‡πÄ‡∏î‡∏¥‡∏°) ... */
div.stButton > button[kind="secondaryFormSubmit"] { /* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö */
    padding: 1px 5px !important; font-size: 10px !important; height: 22px !important; line-height: 1 !important;
}
.time-display {
    font-size: 1.1em; font-weight: bold; margin-top: -10px; margin-bottom: -10px;
}
.stForm {
    padding: 10px; border: 1px solid rgba(255, 255, 255, 0.2); border-radius: 5px;
}

/* ‡∏õ‡∏∏‡πà‡∏° Primary (Clock In) */
div.stButton button[data-testid="baseButton-primary"] {
    background-color: #00FFFF !important; border-color: #00FFFF !important; color: black !important;
}
div.stButton button[data-testid="baseButton-primary"]:hover {
    background-color: #33FFFF !important; border-color: #33FFFF !important;
}
/* ‡∏õ‡∏∏‡πà‡∏° Secondary (Clock Out) */
div.stButton button[data-testid="baseButton-secondary"] {
    color: #00FFFF !important; border-color: #00FFFF !important;
}
/* üí• NEW: ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (Smoking, Toilet) - ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤ */
div.stButton button:not([kind="primary"]):not([kind="secondary"]):not([kind="secondaryFormSubmit"]) {
     /* background-color: grey !important; */ /* Option: ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏≤ */
     /* border-color: grey !important; */
     /* color: white !important; */
}
</style>
"""


# --- 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà) ---

@st.cache_data
def load_data():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
    if os.path.exists(DATA_FILE):
        try:
            df = pd.read_csv(DATA_FILE)
            if not df.empty:
                df['Date'] = pd.to_datetime(df['Date']).dt.date.astype(str)
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•, ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ NaN
                df['Start_Time'] = df['Start_Time'].astype(str)
                df['End_Time'] = df['End_Time'].astype(str).replace('nan', np.nan)
                df['Duration_Minutes'] = pd.to_numeric(df['Duration_Minutes'], errors='coerce') # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç, ‡∏ñ‡πâ‡∏≤ Error ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô NaN
            else:
                 # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡πÅ‡∏ï‡πà Header
                 df = pd.DataFrame(columns=CSV_COLUMNS)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            for col in CSV_COLUMNS:
                 if col not in df.columns:
                      df[col] = np.nan # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡πÑ‡∏õ

            return df.reindex(columns=CSV_COLUMNS) # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤

        except pd.errors.EmptyDataError: # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
             return pd.DataFrame(columns=CSV_COLUMNS)
        except Exception as e:
             st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
             return pd.DataFrame(columns=CSV_COLUMNS)

    return pd.DataFrame(columns=CSV_COLUMNS)


def initialize_data_file():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ"""
    try:
        pathlib.Path(LOGS_DIR).mkdir(parents=True, exist_ok=True)
    except OSError as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: {LOGS_DIR}. ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á.")
        st.stop()

    if not os.path.exists(DATA_FILE):
        df = pd.DataFrame(columns=CSV_COLUMNS)
        df.to_csv(DATA_FILE, index=False)
        st.info(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå {DATA_FILE} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")


def save_data(df):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å DataFrame ‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV"""
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        for col in CSV_COLUMNS:
            if col not in df.columns:
                df[col] = np.nan
        df = df[CSV_COLUMNS] # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
        df.to_csv(DATA_FILE, index=False)
        st.cache_data.clear() # ‡∏•‡πâ‡∏≤‡∏á Cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

# üí• NEW: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Duration (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ)
def calculate_duration(start_time_str, end_time_str):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ"""
    try:
        if pd.isnull(start_time_str) or pd.isnull(end_time_str) or str(start_time_str).lower() == 'nan' or str(end_time_str).lower() == 'nan':
            return np.nan

        date_time_format = '%H:%M:%S'
        base_date = datetime(2000, 1, 1)

        t_start_time = datetime.strptime(str(start_time_str), date_time_format).time()
        t_end_time = datetime.strptime(str(end_time_str), date_time_format).time()

        t_start = datetime.combine(base_date, t_start_time)
        t_end = datetime.combine(base_date, t_end_time)

        if t_end < t_start:
            t_end += pd.Timedelta(days=1)

        duration_minutes = (t_end - t_start).total_seconds() / 60
        return max(0, duration_minutes)
    except (ValueError, TypeError, AttributeError):
        return np.nan

# üí• NEW: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Clock Out ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
def clock_out_latest_activity(employee_id, date_str, end_time_str):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞ Clock Out ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"""
    df = load_data() # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    
    # Filter ‡∏´‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ End_Time
    condition = (df['Employee_ID'] == employee_id) & \
                (df['Date'] == date_str) & \
                (df['End_Time'].isna() | (df['End_Time'].astype(str).str.lower() == 'nan') | (df['End_Time'] == ''))
                
    ongoing_activities = df[condition]

    if not ongoing_activities.empty:
        # ‡∏´‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (index ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
        index_to_update = ongoing_activities.index.max()
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï End_Time
        df.loc[index_to_update, 'End_Time'] = end_time_str
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Duration
        start_time = df.loc[index_to_update, 'Start_Time']
        duration = calculate_duration(start_time, end_time_str)
        df.loc[index_to_update, 'Duration_Minutes'] = duration
        
        save_data(df)
        return True # Clock Out ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    return False # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á Clock Out

# üí• NEW: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà (‡∏£‡∏ß‡∏° Clock Out ‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤)
def log_activity_start(employee_id, date_str, start_time_str, activity_type):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞ Clock Out ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"""
    try:
        # 1. Clock Out ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
        clock_out_latest_activity(employee_id, date_str, start_time_str) # ‡πÉ‡∏ä‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏ö‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤

        # 2. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ Clock Out)
        df = load_data()

        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ
        new_row = pd.DataFrame([{
            'Employee_ID': employee_id,
            'Date': date_str,
            'Start_Time': start_time_str,
            'End_Time': np.nan,
            'Activity_Type': activity_type,
            'Duration_Minutes': np.nan
        }])

        # 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df_to_save = pd.concat([df, new_row], ignore_index=True)
        save_data(df_to_save)
        return True
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° {activity_type}: {e}")
        return False


def delete_log_entry(original_index):
    """‡∏•‡∏ö Log ‡∏ï‡∏≤‡∏° Index ‡πÄ‡∏î‡∏¥‡∏°"""
    df = load_data()
    if original_index in df.index:
        df = df.drop(index=original_index)
        save_data(df)
    else:
        st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö Index {original_index} ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö")


# --- 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---

def format_time_display(time_str):
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô HH:MM"""
    if pd.isnull(time_str) or str(time_str).lower() == 'nan':
        return "N/A"
    try:
        # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å HH:MM:SS
        return datetime.strptime(str(time_str), '%H:%M:%S').strftime('%H:%M')
    except (ValueError, TypeError):
        # ‡∏ñ‡πâ‡∏≤ Error ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô HH:MM ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô
        return str(time_str).split('.')[0] # ‡∏ï‡∏±‡∏î .0 ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ

def format_duration(minutes):
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏õ‡πá‡∏ô HH:MM"""
    if pd.isnull(minutes) or (isinstance(minutes, float) and math.isnan(minutes)):
        return "N/A"
    try:
        minutes = int(float(minutes)) # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô string "120.0"
    except (ValueError, TypeError):
        return "N/A" # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ

    if minutes < 0:
        return "00:00"

    hours = int(minutes // 60)
    mins = int(minutes % 60)
    return f"{hours:02d}:{mins:02d}"


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
def get_csv_content_with_bom(data_file_path):
    # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ...
    try:
        with open(data_file_path, "r", encoding='utf-8') as f:
            csv_content = f.read()
        bom = "\ufeff"
        content_with_bom = bom + csv_content
        return content_with_bom
    except FileNotFoundError: return None
    except Exception as e: return None

# --- 3. ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (UI) ---

st.set_page_config(page_title="Time Logger", layout="wide")
st.markdown(CUSTOM_CSS, unsafe_allow_html=True)


# --- 3.1 ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
initialize_data_file()

# --- 3.2 ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
df = load_data() # df ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏° CSV_COLUMNS


# -----------------------------------------------------------------
# üí• 3. ‡∏™‡πà‡∏ß‡∏ô Header: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Form ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°
# -----------------------------------------------------------------
header_col1, header_col2 = st.columns([1.5, 1])

with header_col1:
    st.title("‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")
    st.markdown(f"**‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà:** `{LOGS_DIR}`")


with header_col2:
    with st.form("activity_form", clear_on_submit=True):
        st.subheader("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")

        # Input ID ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        emp_id_input = st.text_input("Employee ID (Scan/Key In)", key="emp_id_input_key")

        # üí• NEW: ‡πÅ‡∏ñ‡∏ß‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
        st.write("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:")
        activity_buttons_col1, activity_buttons_col2, activity_buttons_col3, activity_buttons_col4 = st.columns(4)

        submitted_work = activity_buttons_col1.form_submit_button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", type="primary", use_container_width=True)
        submitted_smoking = activity_buttons_col2.form_submit_button("‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà", use_container_width=True)
        submitted_toilet = activity_buttons_col3.form_submit_button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", use_container_width=True)
        submitted_end_activity = activity_buttons_col4.form_submit_button("‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", type="secondary", use_container_width=True) # ‡∏õ‡∏∏‡πà‡∏° Clock Out ‡∏´‡∏•‡∏±‡∏Å

        # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°)
        current_date_str = datetime.now().date().strftime('%Y-%m-%d')
        current_time_str = datetime.now().time().strftime('%H:%M:%S')

        # --- Logic ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ---
        if submitted_work or submitted_smoking or submitted_toilet or submitted_end_activity:
            if not emp_id_input:
                st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Employee ID")
                st.stop()

            activity_to_log = None
            success_message = ""

            # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
            if submitted_work:
                activity_to_log = "Break"
                success_message = f"‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID: **{emp_id_input}** ‡πÄ‡∏ß‡∏•‡∏≤ {current_time_str} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!"
            elif submitted_smoking:
                activity_to_log = "Smoking"
                success_message = f"üö≠ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID: **{emp_id_input}** ‡πÄ‡∏ß‡∏•‡∏≤ {current_time_str} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!"
            elif submitted_toilet:
                activity_to_log = "Toilet"
                success_message = f"üöª ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID: **{emp_id_input}** ‡πÄ‡∏ß‡∏•‡∏≤ {current_time_str} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!"

            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
            if activity_to_log:
                if log_activity_start(emp_id_input, current_date_str, current_time_str, activity_to_log):
                    st.success(success_message)
                    st.rerun()
                else:
                    # ‡∏≠‡∏≤‡∏à‡∏°‡∏µ Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô log_activity_start
                    st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
                    st.rerun() # ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á Error

            # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (Clock Out)
            elif submitted_end_activity:
                if clock_out_latest_activity(emp_id_input, current_date_str, current_time_str):
                    st.success(f"‚úÖ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID: **{emp_id_input}** ‡πÄ‡∏ß‡∏•‡∏≤ {current_time_str} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
                    st.rerun()
                else:
                    st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID: **{emp_id_input}** ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {current_date_str}")
                    st.rerun() # ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á Warning

st.markdown("---")

# üí• 3.4 ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å)

st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤")

# --- ‡∏™‡πà‡∏ß‡∏ô Filter (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
col_filter1, col_filter2, col_filter3 = st.columns(3)

filter_date_from = col_filter1.date_input(
    "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (From)",
    value=datetime.now().date() - pd.Timedelta(days=30),
    key="date_from_key"
)

filter_date_to = col_filter2.date_input(
    "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (To)",
    value=datetime.now().date(),
    key="date_to_key"
)

unique_ids = ["All"]
if not df.empty and 'Employee_ID' in df.columns:
    unique_ids += sorted(df['Employee_ID'].dropna().unique())
filter_id = col_filter3.selectbox("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° Employee ID", options=unique_ids, key="id_filter_key")

# --- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---
if df.empty:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤")
else:
    display_df = df.copy()
    display_df['Original_Index'] = display_df.index # ‡πÄ‡∏Å‡πá‡∏ö Index ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏™‡∏°‡∏≠

    # ‡πÅ‡∏õ‡∏•‡∏á Date ‡πÄ‡∏õ‡πá‡∏ô Object ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Filter
    display_df['Date_Obj'] = pd.to_datetime(display_df['Date']).dt.date

    # Logic ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    if filter_date_from and filter_date_to:
        if filter_date_from <= filter_date_to:
            display_df = display_df[
                (display_df['Date_Obj'] >= filter_date_from) &
                (display_df['Date_Obj'] <= filter_date_to)
            ]
        else:
            st.error("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà From ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà To ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
            st.stop()

    if filter_id != "All":
        display_df = display_df[display_df['Employee_ID'] == filter_id]

    if display_df.empty:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        st.stop()

    display_df = display_df.drop(columns=['Date_Obj'], errors='ignore')

    # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    display_df = display_df.sort_values(by=['Date', 'Start_Time'], ascending=[False, False])

    display_df = display_df.reset_index(drop=True) # Reset index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á ---
    # üí• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 7 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå [‡∏•‡∏ö, ID, Date, Activity, Start, End, Duration]
    col_ratios = [0.5, 1, 1, 1.2, 1, 1, 1.3]
    cols = st.columns(col_ratios)

    # üí• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Header
    headers = ["‡∏•‡∏ö", "Employee ID", "Date", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", "‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", "**‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤**"]
    for col, header in zip(cols, headers):
        col.markdown(f"**{header}**")
    st.markdown("---")

    # --- ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    for index, row in display_df.iterrows(): # ‡πÉ‡∏ä‡πâ index ‡∏à‡∏≤‡∏Å display_df ‡∏ó‡∏µ‡πà reset ‡πÅ‡∏•‡πâ‡∏ß
        # ‡πÉ‡∏ä‡πâ Original_Index ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
        original_index = row['Original_Index']

        cols = st.columns(col_ratios)
        time_style = "class='time-display'"

        # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 0: ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
        if cols[0].button(
            "‚ùå",
            key=f"del_{original_index}_{index}", # ‡πÄ‡∏û‡∏¥‡πà‡∏° index ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ key ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
            on_click=delete_log_entry,
            args=(original_index,), # ‡∏™‡πà‡∏á Original Index ‡πÑ‡∏õ‡∏•‡∏ö
            help="‡∏•‡∏ö Log ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ"
        ):
             st.rerun()

        # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 1 - 2: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (ID, Date)
        cols[1].write(row['Employee_ID'])
        cols[2].write(row['Date'])

        # üí• ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 3: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
        cols[3].write(row['Activity_Type'])

        # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 4: ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° (Start Time)
        cols[4].markdown(f"<p {time_style}>{format_time_display(row['Start_Time'])}</p>", unsafe_allow_html=True)

        # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 5: ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (End Time)
        end_time_display = format_time_display(row['End_Time'])
        cols[5].markdown(f"<p {time_style}>{end_time_display}</p>", unsafe_allow_html=True)

        # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 6: ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (Duration)
        duration_display = format_duration(row['Duration_Minutes'])
        cols[6].markdown(f"<p {time_style}>{duration_display}</p>", unsafe_allow_html=True)

    st.markdown("---")

# -----------------------------------------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
# -----------------------------------------------------------------
st.subheader("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

csv_data = get_csv_content_with_bom(DATA_FILE)

if csv_data:
    st.download_button(
        label="Download Log File (.csv)",
        data=csv_data,
        file_name=os.path.basename(DATA_FILE),
        mime="text/csv",
        key="download_button_key"
    )

# (Optional) ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
with st.expander(f"‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö (Raw Data from: {DATA_FILE})"):
    # üí• ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏¥‡∏ö‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    try:
        raw_df_display = pd.read_csv(DATA_FILE)
        st.dataframe(raw_df_display)
    except FileNotFoundError:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡πÑ‡∏î‡πâ: {e}")
